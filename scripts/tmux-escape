#!/usr/bin/env python
import sys
import subprocess
import time
import os
import argparse


def write(b: bytes):
    os.write(1, b)


def has_tmux():
    return "TMUX" in os.environ


def tmux_passthrough(b: bytes):
    return b'\x1bPtmux;' + b.replace(b'\x1b', b'\x1b\x1b') + b'\x1b\\'


def tmux_passthrough_pipe(buf: bytes):
    curr = 0
    while True:
        start = buf.find(b'\x1b', curr)
        if start < 0:
            break
        end = buf.find(b'\x1b\\', start + 1)
        if end < 0:
            break
        write(buf[curr:start])
        write(tmux_passthrough(buf[start:end + 2]))
        curr = end + 2


def clear_kitty():
    sys.stdout.buffer.write(b'\033Ptmux;\033' + b'\033_Ga=d,d=A\033\033\\' + b'\033\\')


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    cmds = parser.add_subparsers(title="subcommands", dest="command")
    p = cmds.add_parser("kittyimg",
                        help="Show an image using kitty protocol. Works OKish in tmux.")
    p.add_argument("input", help="image file")
    p.add_argument("--ttl", type=int, default=3, help="time to clear the image, if in tmux")
    p = cmds.add_parser("passthrough", help="tmux-passthrough for stdin. for debugging.")
    p = cmds.add_parser("clearimg", help="clear kitty image")
    p = cmds.add_parser("notify", help="send desktop notifications (OSC99)")
    p.add_argument("message", help="notification message")

    args = parser.parse_args()

    if args.command == "passthrough":
        buf = sys.stdin.buffer.read()
        tmux_passthrough_pipe(buf)
    elif args.command == "kittyimg":
        fname = args.input
        if not has_tmux():
            cmd = f'timg -C -pk "{fname}"'
            os.system(cmd)
        else:
            cmd = f'timg -C -g x100 -pk "{fname}"'
            buf = subprocess.check_output(cmd, shell=True)
            write(tmux_passthrough(buf))
            if args.ttl > 0:
                time.sleep(args.ttl)
                clear_kitty()
    elif args.command == "clearimg":
        clear_kitty()
    elif args.command == "notify":
        payload = b'\x1b]9;' + args.message.encode('utf-8') + b'\x1b\\'
        if has_tmux():
            payload = tmux_passthrough(payload)
        write(payload)
        write(b'\a')  # bell
